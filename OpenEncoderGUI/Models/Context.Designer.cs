//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using LinqConnect template.
// Code is generated on: 27/03/2022 00:56:27
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using Devart.Data.Linq;
using Devart.Data.Linq.Mapping;
using System.ComponentModel;

namespace Model
{

    /// <summary>
    /// There are no comments for Context class in the schema.
    /// </summary>
    [DatabaseAttribute(Name = "openencoder")]
    [ProviderAttribute(typeof(Devart.Data.PostgreSql.Linq.Provider.PgSqlDataProvider))]
    public partial class Context : Devart.Data.Linq.DataContext
    {
    
        /// <summary>
        /// There are no comments for compiledQueryCache property in the schema.
        /// </summary>
        public static CompiledQueryCache compiledQueryCache = CompiledQueryCache.RegisterDataContext(typeof(Context));
        private static MappingSource mappingSource = new Devart.Data.Linq.Mapping.AttributeMappingSource();

        #region Extensibility Method Definitions
    
        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// There are no comments for OnSubmitError method in the schema.
        /// </summary>
        partial void OnSubmitError(Devart.Data.Linq.SubmitErrorEventArgs args);

        /// <summary>
        /// There are no comments for InsertPublicJob method in the schema.
        /// </summary>
        partial void InsertPublicJob(PublicJob instance);

        /// <summary>
        /// There are no comments for UpdatePublicJob method in the schema.
        /// </summary>
        partial void UpdatePublicJob(PublicJob instance);

        /// <summary>
        /// There are no comments for DeletePublicJob method in the schema.
        /// </summary>
        partial void DeletePublicJob(PublicJob instance);

        /// <summary>
        /// There are no comments for InsertPublicEncode method in the schema.
        /// </summary>
        partial void InsertPublicEncode(PublicEncode instance);

        /// <summary>
        /// There are no comments for UpdatePublicEncode method in the schema.
        /// </summary>
        partial void UpdatePublicEncode(PublicEncode instance);

        /// <summary>
        /// There are no comments for DeletePublicEncode method in the schema.
        /// </summary>
        partial void DeletePublicEncode(PublicEncode instance);

        /// <summary>
        /// There are no comments for InsertPublicUser method in the schema.
        /// </summary>
        partial void InsertPublicUser(PublicUser instance);

        /// <summary>
        /// There are no comments for UpdatePublicUser method in the schema.
        /// </summary>
        partial void UpdatePublicUser(PublicUser instance);

        /// <summary>
        /// There are no comments for DeletePublicUser method in the schema.
        /// </summary>
        partial void DeletePublicUser(PublicUser instance);

        /// <summary>
        /// There are no comments for InsertPublicSettingsOption method in the schema.
        /// </summary>
        partial void InsertPublicSettingsOption(PublicSettingsOption instance);

        /// <summary>
        /// There are no comments for UpdatePublicSettingsOption method in the schema.
        /// </summary>
        partial void UpdatePublicSettingsOption(PublicSettingsOption instance);

        /// <summary>
        /// There are no comments for DeletePublicSettingsOption method in the schema.
        /// </summary>
        partial void DeletePublicSettingsOption(PublicSettingsOption instance);

        /// <summary>
        /// There are no comments for InsertPublicSetting method in the schema.
        /// </summary>
        partial void InsertPublicSetting(PublicSetting instance);

        /// <summary>
        /// There are no comments for UpdatePublicSetting method in the schema.
        /// </summary>
        partial void UpdatePublicSetting(PublicSetting instance);

        /// <summary>
        /// There are no comments for DeletePublicSetting method in the schema.
        /// </summary>
        partial void DeletePublicSetting(PublicSetting instance);

        /// <summary>
        /// There are no comments for InsertPublicPreset method in the schema.
        /// </summary>
        partial void InsertPublicPreset(PublicPreset instance);

        /// <summary>
        /// There are no comments for UpdatePublicPreset method in the schema.
        /// </summary>
        partial void UpdatePublicPreset(PublicPreset instance);

        /// <summary>
        /// There are no comments for DeletePublicPreset method in the schema.
        /// </summary>
        partial void DeletePublicPreset(PublicPreset instance);

        #endregion

        /// <summary>
        /// There are no comments for Context constructor in the schema.
        /// </summary>
        public Context() :
        base(@"User Id=postgres;Password=postgres;Host=gleidson-nunes.ddns.net;Database=openencoder;Persist Security Info=True;Initial Schema=public;AllowDateTimeOffset=True;Force IPv4=True", mappingSource)
        {
            OnCreated();
        }

        /// <summary>
        /// There are no comments for Context constructor in the schema.
        /// </summary>
        public Context(MappingSource mappingSource) :
        base(@"User Id=postgres;Password=postgres;Host=gleidson-nunes.ddns.net;Database=openencoder;Persist Security Info=True;Initial Schema=public;AllowDateTimeOffset=True;Force IPv4=True", mappingSource)
        {
            OnCreated();
        }

        /// <summary>
        /// There are no comments for Context constructor in the schema.
        /// </summary>
        public Context(string connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        /// <summary>
        /// There are no comments for Context constructor in the schema.
        /// </summary>
        public Context(System.Data.IDbConnection connection) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        /// <summary>
        /// There are no comments for Context constructor in the schema.
        /// </summary>
        public Context(string connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        /// <summary>
        /// There are no comments for Context constructor in the schema.
        /// </summary>
        public Context(System.Data.IDbConnection connection, MappingSource mappingSource) :
            base(connection, mappingSource)
        {
          OnCreated();
        }

        /// <summary>
        /// There are no comments for PublicJobs property in the schema.
        /// </summary>
        public Devart.Data.Linq.Table<PublicJob> PublicJobs
        {
            get
            {
                return this.GetTable<PublicJob>();
            }
        }

        /// <summary>
        /// There are no comments for PublicEncodes property in the schema.
        /// </summary>
        public Devart.Data.Linq.Table<PublicEncode> PublicEncodes
        {
            get
            {
                return this.GetTable<PublicEncode>();
            }
        }

        /// <summary>
        /// There are no comments for PublicUsers property in the schema.
        /// </summary>
        public Devart.Data.Linq.Table<PublicUser> PublicUsers
        {
            get
            {
                return this.GetTable<PublicUser>();
            }
        }

        /// <summary>
        /// There are no comments for PublicSettingsOptions property in the schema.
        /// </summary>
        public Devart.Data.Linq.Table<PublicSettingsOption> PublicSettingsOptions
        {
            get
            {
                return this.GetTable<PublicSettingsOption>();
            }
        }

        /// <summary>
        /// There are no comments for PublicSettings property in the schema.
        /// </summary>
        public Devart.Data.Linq.Table<PublicSetting> PublicSettings
        {
            get
            {
                return this.GetTable<PublicSetting>();
            }
        }

        /// <summary>
        /// There are no comments for PublicPresets property in the schema.
        /// </summary>
        public Devart.Data.Linq.Table<PublicPreset> PublicPresets
        {
            get
            {
                return this.GetTable<PublicPreset>();
            }
        }
    }
}

namespace Model
{

    /// <summary>
    /// There are no comments for Model.PublicJob in the schema.
    /// </summary>
    [Table(Name = @"public.jobs")]
    public partial class PublicJob : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Guid;

        private string _Preset;

        private System.DateTime? _CreatedDate = DateTime.Now;

        private string _Status;

        private string _Source;

        private string _Destination;
        #pragma warning restore 0649

        private EntityRef<PublicEncode> _PublicEncode;

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnLoaded method in the schema.
        /// </summary>
        partial void OnLoaded();

        /// <summary>
        /// There are no comments for OnValidate method in the schema.
        /// </summary>
        partial void OnValidate(ChangeAction action);

        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// There are no comments for OnIdChanging method in the schema.
        /// </summary>
        partial void OnIdChanging(int value);

        /// <summary>
        /// There are no comments for OnIdChanged method in the schema.
        /// </summary>
        partial void OnIdChanged();

        /// <summary>
        /// There are no comments for OnGuidChanging method in the schema.
        /// </summary>
        partial void OnGuidChanging(string value);

        /// <summary>
        /// There are no comments for OnGuidChanged method in the schema.
        /// </summary>
        partial void OnGuidChanged();

        /// <summary>
        /// There are no comments for OnPresetChanging method in the schema.
        /// </summary>
        partial void OnPresetChanging(string value);

        /// <summary>
        /// There are no comments for OnPresetChanged method in the schema.
        /// </summary>
        partial void OnPresetChanged();

        /// <summary>
        /// There are no comments for OnCreatedDateChanging method in the schema.
        /// </summary>
        partial void OnCreatedDateChanging(System.DateTime? value);

        /// <summary>
        /// There are no comments for OnCreatedDateChanged method in the schema.
        /// </summary>
        partial void OnCreatedDateChanged();

        /// <summary>
        /// There are no comments for OnStatusChanging method in the schema.
        /// </summary>
        partial void OnStatusChanging(string value);

        /// <summary>
        /// There are no comments for OnStatusChanged method in the schema.
        /// </summary>
        partial void OnStatusChanged();

        /// <summary>
        /// There are no comments for OnSourceChanging method in the schema.
        /// </summary>
        partial void OnSourceChanging(string value);

        /// <summary>
        /// There are no comments for OnSourceChanged method in the schema.
        /// </summary>
        partial void OnSourceChanged();

        /// <summary>
        /// There are no comments for OnDestinationChanging method in the schema.
        /// </summary>
        partial void OnDestinationChanging(string value);

        /// <summary>
        /// There are no comments for OnDestinationChanged method in the schema.
        /// </summary>
        partial void OnDestinationChanged();
        #endregion

        /// <summary>
        /// There are no comments for PublicJob constructor in the schema.
        /// </summary>
        public PublicJob()
        {
            this._PublicEncode  = default(EntityRef<PublicEncode>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    if (this._PublicEncode.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Guid in the schema.
        /// </summary>
        [Column(Name = @"guid", Storage = "_Guid", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", IsPrimaryKey = true)]
        public string Guid
        {
            get
            {
                return this._Guid;
            }
            set
            {
                if (this._Guid != value)
                {
                    this.OnGuidChanging(value);
                    this.SendPropertyChanging("Guid");
                    this._Guid = value;
                    this.SendPropertyChanged("Guid");
                    this.OnGuidChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Preset in the schema.
        /// </summary>
        [Column(Name = @"preset", Storage = "_Preset", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Preset
        {
            get
            {
                return this._Preset;
            }
            set
            {
                if (this._Preset != value)
                {
                    this.OnPresetChanging(value);
                    this.SendPropertyChanging("Preset");
                    this._Preset = value;
                    this.SendPropertyChanged("Preset");
                    this.OnPresetChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for CreatedDate in the schema.
        /// </summary>
        [Column(Name = @"created_date", Storage = "_CreatedDate", DbType = "TIMESTAMP", UpdateCheck = UpdateCheck.Never)]
        public System.DateTime? CreatedDate
        {
            get
            {
                return this._CreatedDate;
            }
            set
            {
                if (this._CreatedDate != value)
                {
                    this.OnCreatedDateChanging(value);
                    this.SendPropertyChanging("CreatedDate");
                    this._CreatedDate = value;
                    this.SendPropertyChanged("CreatedDate");
                    this.OnCreatedDateChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Status in the schema.
        /// </summary>
        [Column(Name = @"status", Storage = "_Status", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string Status
        {
            get
            {
                return this._Status;
            }
            set
            {
                if (this._Status != value)
                {
                    this.OnStatusChanging(value);
                    this.SendPropertyChanging("Status");
                    this._Status = value;
                    this.SendPropertyChanged("Status");
                    this.OnStatusChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Source in the schema.
        /// </summary>
        [Column(Name = @"""source""", Storage = "_Source", DbType = "VARCHAR(128)", UpdateCheck = UpdateCheck.Never)]
        public string Source
        {
            get
            {
                return this._Source;
            }
            set
            {
                if (this._Source != value)
                {
                    this.OnSourceChanging(value);
                    this.SendPropertyChanging("Source");
                    this._Source = value;
                    this.SendPropertyChanged("Source");
                    this.OnSourceChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Destination in the schema.
        /// </summary>
        [Column(Name = @"destination", Storage = "_Destination", DbType = "VARCHAR(128)", UpdateCheck = UpdateCheck.Never)]
        public string Destination
        {
            get
            {
                return this._Destination;
            }
            set
            {
                if (this._Destination != value)
                {
                    this.OnDestinationChanging(value);
                    this.SendPropertyChanging("Destination");
                    this._Destination = value;
                    this.SendPropertyChanged("Destination");
                    this.OnDestinationChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PublicEncode in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PublicJob_PublicEncode", Storage="_PublicEncode", ThisKey="Id", OtherKey="JobId", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
        public PublicEncode PublicEncode
        {
            get
            {
                return this._PublicEncode.Entity;
            }
            set
            {
                PublicEncode previousValue = this._PublicEncode.Entity;
                if ((previousValue != value) || (this._PublicEncode.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PublicEncode");
                    if (previousValue != null)
                    {
                        this._PublicEncode.Entity = null;
                        previousValue.PublicJob = null;
                    }
                    this._PublicEncode.Entity = value;
                    if (value != null)
                    {
                        value.PublicJob = this;
                    }
                    this.SendPropertyChanged("PublicEncode");
                }
            }
        }

        #region ICloneable Members

        /// <summary>
        /// There are no comments for Clone method in the schema.
        /// </summary>
        public virtual object Clone()
        {
            PublicJob obj = new PublicJob();
            obj.Id = Id;
            obj.Guid = Guid;
            obj.Preset = Preset;
            obj.CreatedDate = CreatedDate;
            obj.Status = Status;
            obj.Source = Source;
            obj.Destination = Destination;
            return obj;
        }

        #endregion
   
        /// <summary>
        /// There are no comments for PropertyChanging event in the schema.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// There are no comments for PropertyChanged event in the schema.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        /// <summary>
        /// There are no comments for SendPropertyChanged method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Model.PublicEncode in the schema.
    /// </summary>
    [Table(Name = @"public.encode")]
    public partial class PublicEncode : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Probe;

        private double? _Progress = 0;

        private int? _JobId;

        private string _Speed;

        private double? _Fps = 0;

        private string _Option;
        #pragma warning restore 0649

        private EntityRef<PublicJob> _PublicJob;

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnLoaded method in the schema.
        /// </summary>
        partial void OnLoaded();

        /// <summary>
        /// There are no comments for OnValidate method in the schema.
        /// </summary>
        partial void OnValidate(ChangeAction action);

        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// There are no comments for OnIdChanging method in the schema.
        /// </summary>
        partial void OnIdChanging(int value);

        /// <summary>
        /// There are no comments for OnIdChanged method in the schema.
        /// </summary>
        partial void OnIdChanged();

        /// <summary>
        /// There are no comments for OnProbeChanging method in the schema.
        /// </summary>
        partial void OnProbeChanging(string value);

        /// <summary>
        /// There are no comments for OnProbeChanged method in the schema.
        /// </summary>
        partial void OnProbeChanged();

        /// <summary>
        /// There are no comments for OnProgressChanging method in the schema.
        /// </summary>
        partial void OnProgressChanging(double? value);

        /// <summary>
        /// There are no comments for OnProgressChanged method in the schema.
        /// </summary>
        partial void OnProgressChanged();

        /// <summary>
        /// There are no comments for OnJobIdChanging method in the schema.
        /// </summary>
        partial void OnJobIdChanging(int? value);

        /// <summary>
        /// There are no comments for OnJobIdChanged method in the schema.
        /// </summary>
        partial void OnJobIdChanged();

        /// <summary>
        /// There are no comments for OnSpeedChanging method in the schema.
        /// </summary>
        partial void OnSpeedChanging(string value);

        /// <summary>
        /// There are no comments for OnSpeedChanged method in the schema.
        /// </summary>
        partial void OnSpeedChanged();

        /// <summary>
        /// There are no comments for OnFpsChanging method in the schema.
        /// </summary>
        partial void OnFpsChanging(double? value);

        /// <summary>
        /// There are no comments for OnFpsChanged method in the schema.
        /// </summary>
        partial void OnFpsChanged();

        /// <summary>
        /// There are no comments for OnOptionChanging method in the schema.
        /// </summary>
        partial void OnOptionChanging(string value);

        /// <summary>
        /// There are no comments for OnOptionChanged method in the schema.
        /// </summary>
        partial void OnOptionChanged();
        #endregion

        /// <summary>
        /// There are no comments for PublicEncode constructor in the schema.
        /// </summary>
        public PublicEncode()
        {
            this._PublicJob  = default(EntityRef<PublicJob>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Probe in the schema.
        /// </summary>
        [Column(Name = @"probe", Storage = "_Probe", DbType = "JSON", UpdateCheck = UpdateCheck.Never)]
        public string Probe
        {
            get
            {
                return this._Probe;
            }
            set
            {
                if (this._Probe != value)
                {
                    this.OnProbeChanging(value);
                    this.SendPropertyChanging("Probe");
                    this._Probe = value;
                    this.SendPropertyChanged("Probe");
                    this.OnProbeChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Progress in the schema.
        /// </summary>
        [Column(Name = @"progress", Storage = "_Progress", DbType = "FLOAT8", UpdateCheck = UpdateCheck.Never)]
        public double? Progress
        {
            get
            {
                return this._Progress;
            }
            set
            {
                if (this._Progress != value)
                {
                    this.OnProgressChanging(value);
                    this.SendPropertyChanging("Progress");
                    this._Progress = value;
                    this.SendPropertyChanged("Progress");
                    this.OnProgressChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for JobId in the schema.
        /// </summary>
        [Column(Name = @"job_id", Storage = "_JobId", DbType = "INT4", UpdateCheck = UpdateCheck.Never)]
        public int? JobId
        {
            get
            {
                return this._JobId;
            }
            set
            {
                if (this._JobId != value)
                {
                    if (this._PublicJob.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnJobIdChanging(value);
                    this.SendPropertyChanging("JobId");
                    this._JobId = value;
                    this.SendPropertyChanged("JobId");
                    this.OnJobIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Speed in the schema.
        /// </summary>
        [Column(Name = @"speed", Storage = "_Speed", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string Speed
        {
            get
            {
                return this._Speed;
            }
            set
            {
                if (this._Speed != value)
                {
                    this.OnSpeedChanging(value);
                    this.SendPropertyChanging("Speed");
                    this._Speed = value;
                    this.SendPropertyChanged("Speed");
                    this.OnSpeedChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Fps in the schema.
        /// </summary>
        [Column(Name = @"fps", Storage = "_Fps", DbType = "FLOAT8", UpdateCheck = UpdateCheck.Never)]
        public double? Fps
        {
            get
            {
                return this._Fps;
            }
            set
            {
                if (this._Fps != value)
                {
                    this.OnFpsChanging(value);
                    this.SendPropertyChanging("Fps");
                    this._Fps = value;
                    this.SendPropertyChanged("Fps");
                    this.OnFpsChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Option in the schema.
        /// </summary>
        [Column(Name = @"""options""", Storage = "_Option", DbType = "JSON", UpdateCheck = UpdateCheck.Never)]
        public string Option
        {
            get
            {
                return this._Option;
            }
            set
            {
                if (this._Option != value)
                {
                    this.OnOptionChanging(value);
                    this.SendPropertyChanging("Option");
                    this._Option = value;
                    this.SendPropertyChanged("Option");
                    this.OnOptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PublicJob in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PublicJob_PublicEncode", Storage="_PublicJob", ThisKey="JobId", OtherKey="Id", IsForeignKey=true)]
        public PublicJob PublicJob
        {
            get
            {
                return this._PublicJob.Entity;
            }
            set
            {
                PublicJob previousValue = this._PublicJob.Entity;
                if ((previousValue != value) || (this._PublicJob.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PublicJob");
                    if (previousValue != null)
                    {
                        this._PublicJob.Entity = null;
                        previousValue.PublicEncode = null;
                    }
                    this._PublicJob.Entity = value;
                    if (value != null)
                    {
                        this._JobId = value.Id;
                        value.PublicEncode = this;
                    }
                    else
                    {
                        this._JobId = default(int?);
                    }
                    this.SendPropertyChanged("PublicJob");
                }
            }
        }

        #region ICloneable Members

        /// <summary>
        /// There are no comments for Clone method in the schema.
        /// </summary>
        public virtual object Clone()
        {
            PublicEncode obj = new PublicEncode();
            obj.Id = Id;
            obj.Probe = Probe;
            obj.Progress = Progress;
            obj.JobId = JobId;
            obj.Speed = Speed;
            obj.Fps = Fps;
            obj.Option = Option;
            return obj;
        }

        #endregion
   
        /// <summary>
        /// There are no comments for PropertyChanging event in the schema.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// There are no comments for PropertyChanged event in the schema.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        /// <summary>
        /// There are no comments for SendPropertyChanged method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Model.PublicUser in the schema.
    /// </summary>
    [Table(Name = @"public.users")]
    public partial class PublicUser : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Username;

        private string _Password;

        private string _Role;

        private bool? _ForcePasswordReset = false;

        private bool? _Active = true;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnLoaded method in the schema.
        /// </summary>
        partial void OnLoaded();

        /// <summary>
        /// There are no comments for OnValidate method in the schema.
        /// </summary>
        partial void OnValidate(ChangeAction action);

        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// There are no comments for OnIdChanging method in the schema.
        /// </summary>
        partial void OnIdChanging(int value);

        /// <summary>
        /// There are no comments for OnIdChanged method in the schema.
        /// </summary>
        partial void OnIdChanged();

        /// <summary>
        /// There are no comments for OnUsernameChanging method in the schema.
        /// </summary>
        partial void OnUsernameChanging(string value);

        /// <summary>
        /// There are no comments for OnUsernameChanged method in the schema.
        /// </summary>
        partial void OnUsernameChanged();

        /// <summary>
        /// There are no comments for OnPasswordChanging method in the schema.
        /// </summary>
        partial void OnPasswordChanging(string value);

        /// <summary>
        /// There are no comments for OnPasswordChanged method in the schema.
        /// </summary>
        partial void OnPasswordChanged();

        /// <summary>
        /// There are no comments for OnRoleChanging method in the schema.
        /// </summary>
        partial void OnRoleChanging(string value);

        /// <summary>
        /// There are no comments for OnRoleChanged method in the schema.
        /// </summary>
        partial void OnRoleChanged();

        /// <summary>
        /// There are no comments for OnForcePasswordResetChanging method in the schema.
        /// </summary>
        partial void OnForcePasswordResetChanging(bool? value);

        /// <summary>
        /// There are no comments for OnForcePasswordResetChanged method in the schema.
        /// </summary>
        partial void OnForcePasswordResetChanged();

        /// <summary>
        /// There are no comments for OnActiveChanging method in the schema.
        /// </summary>
        partial void OnActiveChanging(bool? value);

        /// <summary>
        /// There are no comments for OnActiveChanged method in the schema.
        /// </summary>
        partial void OnActiveChanged();
        #endregion

        /// <summary>
        /// There are no comments for PublicUser constructor in the schema.
        /// </summary>
        public PublicUser()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, UpdateCheck = UpdateCheck.Never)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Username in the schema.
        /// </summary>
        [Column(Name = @"username", Storage = "_Username", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", IsPrimaryKey = true)]
        public string Username
        {
            get
            {
                return this._Username;
            }
            set
            {
                if (this._Username != value)
                {
                    this.OnUsernameChanging(value);
                    this.SendPropertyChanging("Username");
                    this._Username = value;
                    this.SendPropertyChanged("Username");
                    this.OnUsernameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Password in the schema.
        /// </summary>
        [Column(Name = @"""password""", Storage = "_Password", CanBeNull = false, DbType = "VARCHAR(128) NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public string Password
        {
            get
            {
                return this._Password;
            }
            set
            {
                if (this._Password != value)
                {
                    this.OnPasswordChanging(value);
                    this.SendPropertyChanging("Password");
                    this._Password = value;
                    this.SendPropertyChanged("Password");
                    this.OnPasswordChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Role in the schema.
        /// </summary>
        [Column(Name = @"""role""", Storage = "_Role", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string Role
        {
            get
            {
                return this._Role;
            }
            set
            {
                if (this._Role != value)
                {
                    this.OnRoleChanging(value);
                    this.SendPropertyChanging("Role");
                    this._Role = value;
                    this.SendPropertyChanged("Role");
                    this.OnRoleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for ForcePasswordReset in the schema.
        /// </summary>
        [Column(Name = @"force_password_reset", Storage = "_ForcePasswordReset", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? ForcePasswordReset
        {
            get
            {
                return this._ForcePasswordReset;
            }
            set
            {
                if (this._ForcePasswordReset != value)
                {
                    this.OnForcePasswordResetChanging(value);
                    this.SendPropertyChanging("ForcePasswordReset");
                    this._ForcePasswordReset = value;
                    this.SendPropertyChanged("ForcePasswordReset");
                    this.OnForcePasswordResetChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"active", Storage = "_Active", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging("Active");
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

        #region ICloneable Members

        /// <summary>
        /// There are no comments for Clone method in the schema.
        /// </summary>
        public virtual object Clone()
        {
            PublicUser obj = new PublicUser();
            obj.Id = Id;
            obj.Username = Username;
            obj.Password = Password;
            obj.Role = Role;
            obj.ForcePasswordReset = ForcePasswordReset;
            obj.Active = Active;
            return obj;
        }

        #endregion
   
        /// <summary>
        /// There are no comments for PropertyChanging event in the schema.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// There are no comments for PropertyChanged event in the schema.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        /// <summary>
        /// There are no comments for SendPropertyChanged method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Model.PublicSettingsOption in the schema.
    /// </summary>
    [Table(Name = @"public.settings_option")]
    public partial class PublicSettingsOption : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private string _Description;

        private string _Title;
        #pragma warning restore 0649

        private EntityRef<PublicSetting> _PublicSettings_SettingsOptionId;

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnLoaded method in the schema.
        /// </summary>
        partial void OnLoaded();

        /// <summary>
        /// There are no comments for OnValidate method in the schema.
        /// </summary>
        partial void OnValidate(ChangeAction action);

        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// There are no comments for OnIdChanging method in the schema.
        /// </summary>
        partial void OnIdChanging(int value);

        /// <summary>
        /// There are no comments for OnIdChanged method in the schema.
        /// </summary>
        partial void OnIdChanged();

        /// <summary>
        /// There are no comments for OnNameChanging method in the schema.
        /// </summary>
        partial void OnNameChanging(string value);

        /// <summary>
        /// There are no comments for OnNameChanged method in the schema.
        /// </summary>
        partial void OnNameChanged();

        /// <summary>
        /// There are no comments for OnDescriptionChanging method in the schema.
        /// </summary>
        partial void OnDescriptionChanging(string value);

        /// <summary>
        /// There are no comments for OnDescriptionChanged method in the schema.
        /// </summary>
        partial void OnDescriptionChanged();

        /// <summary>
        /// There are no comments for OnTitleChanging method in the schema.
        /// </summary>
        partial void OnTitleChanging(string value);

        /// <summary>
        /// There are no comments for OnTitleChanged method in the schema.
        /// </summary>
        partial void OnTitleChanged();
        #endregion

        /// <summary>
        /// There are no comments for PublicSettingsOption constructor in the schema.
        /// </summary>
        public PublicSettingsOption()
        {
            this._PublicSettings_SettingsOptionId  = default(EntityRef<PublicSetting>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    if (this._PublicSettings_SettingsOptionId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR(1024)", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Title in the schema.
        /// </summary>
        [Column(Name = @"title", Storage = "_Title", DbType = "VARCHAR(64)", UpdateCheck = UpdateCheck.Never)]
        public string Title
        {
            get
            {
                return this._Title;
            }
            set
            {
                if (this._Title != value)
                {
                    this.OnTitleChanging(value);
                    this.SendPropertyChanging("Title");
                    this._Title = value;
                    this.SendPropertyChanged("Title");
                    this.OnTitleChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PublicSettings_SettingsOptionId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PublicSettingsOption_PublicSetting", Storage="_PublicSettings_SettingsOptionId", ThisKey="Id", OtherKey="SettingsOptionId", IsUnique=true, IsForeignKey=false, DeleteRule="CASCADE")]
        public PublicSetting PublicSettings_SettingsOptionId
        {
            get
            {
                return this._PublicSettings_SettingsOptionId.Entity;
            }
            set
            {
                PublicSetting previousValue = this._PublicSettings_SettingsOptionId.Entity;
                if ((previousValue != value) || (this._PublicSettings_SettingsOptionId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PublicSettings_SettingsOptionId");
                    if (previousValue != null)
                    {
                        this._PublicSettings_SettingsOptionId.Entity = null;
                        previousValue.PublicSettingsOption_SettingsOptionId = null;
                    }
                    this._PublicSettings_SettingsOptionId.Entity = value;
                    if (value != null)
                    {
                        value.PublicSettingsOption_SettingsOptionId = this;
                    }
                    this.SendPropertyChanged("PublicSettings_SettingsOptionId");
                }
            }
        }

        #region ICloneable Members

        /// <summary>
        /// There are no comments for Clone method in the schema.
        /// </summary>
        public virtual object Clone()
        {
            PublicSettingsOption obj = new PublicSettingsOption();
            obj.Id = Id;
            obj.Name = Name;
            obj.Description = Description;
            obj.Title = Title;
            return obj;
        }

        #endregion
   
        /// <summary>
        /// There are no comments for PropertyChanging event in the schema.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// There are no comments for PropertyChanged event in the schema.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        /// <summary>
        /// There are no comments for SendPropertyChanged method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Model.PublicSetting in the schema.
    /// </summary>
    [Table(Name = @"public.settings")]
    public partial class PublicSetting : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _SettingsOptionId;

        private string _Value;

        private int _Id;
        #pragma warning restore 0649

        private EntityRef<PublicSettingsOption> _PublicSettingsOption_SettingsOptionId;

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnLoaded method in the schema.
        /// </summary>
        partial void OnLoaded();

        /// <summary>
        /// There are no comments for OnValidate method in the schema.
        /// </summary>
        partial void OnValidate(ChangeAction action);

        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// There are no comments for OnSettingsOptionIdChanging method in the schema.
        /// </summary>
        partial void OnSettingsOptionIdChanging(int value);

        /// <summary>
        /// There are no comments for OnSettingsOptionIdChanged method in the schema.
        /// </summary>
        partial void OnSettingsOptionIdChanged();

        /// <summary>
        /// There are no comments for OnValueChanging method in the schema.
        /// </summary>
        partial void OnValueChanging(string value);

        /// <summary>
        /// There are no comments for OnValueChanged method in the schema.
        /// </summary>
        partial void OnValueChanged();

        /// <summary>
        /// There are no comments for OnIdChanging method in the schema.
        /// </summary>
        partial void OnIdChanging(int value);

        /// <summary>
        /// There are no comments for OnIdChanged method in the schema.
        /// </summary>
        partial void OnIdChanged();
        #endregion

        /// <summary>
        /// There are no comments for PublicSetting constructor in the schema.
        /// </summary>
        public PublicSetting()
        {
            this._PublicSettingsOption_SettingsOptionId  = default(EntityRef<PublicSettingsOption>);
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for SettingsOptionId in the schema.
        /// </summary>
        [Column(Name = @"settings_option_id", Storage = "_SettingsOptionId", CanBeNull = false, DbType = "INT4 NOT NULL", UpdateCheck = UpdateCheck.Never)]
        public int SettingsOptionId
        {
            get
            {
                return this._SettingsOptionId;
            }
            set
            {
                if (this._SettingsOptionId != value)
                {
                    if (this._PublicSettingsOption_SettingsOptionId.HasLoadedOrAssignedValue)
                    {
                        throw new ForeignKeyReferenceAlreadyHasValueException();
                    }

                    this.OnSettingsOptionIdChanging(value);
                    this.SendPropertyChanging("SettingsOptionId");
                    this._SettingsOptionId = value;
                    this.SendPropertyChanged("SettingsOptionId");
                    this.OnSettingsOptionIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Value in the schema.
        /// </summary>
        [Column(Name = @"""value""", Storage = "_Value", DbType = "VARCHAR(256)", UpdateCheck = UpdateCheck.Never)]
        public string Value
        {
            get
            {
                return this._Value;
            }
            set
            {
                if (this._Value != value)
                {
                    this.OnValueChanging(value);
                    this.SendPropertyChanging("Value");
                    this._Value = value;
                    this.SendPropertyChanged("Value");
                    this.OnValueChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for PublicSettingsOption_SettingsOptionId in the schema.
        /// </summary>
        [Devart.Data.Linq.Mapping.Association(Name="PublicSettingsOption_PublicSetting", Storage="_PublicSettingsOption_SettingsOptionId", ThisKey="SettingsOptionId", OtherKey="Id", IsForeignKey=true, DeleteOnNull=true)]
        public PublicSettingsOption PublicSettingsOption_SettingsOptionId
        {
            get
            {
                return this._PublicSettingsOption_SettingsOptionId.Entity;
            }
            set
            {
                PublicSettingsOption previousValue = this._PublicSettingsOption_SettingsOptionId.Entity;
                if ((previousValue != value) || (this._PublicSettingsOption_SettingsOptionId.HasLoadedOrAssignedValue == false))
                {
                    this.SendPropertyChanging("PublicSettingsOption_SettingsOptionId");
                    if (previousValue != null)
                    {
                        this._PublicSettingsOption_SettingsOptionId.Entity = null;
                        previousValue.PublicSettings_SettingsOptionId = null;
                    }
                    this._PublicSettingsOption_SettingsOptionId.Entity = value;
                    if (value != null)
                    {
                        this._SettingsOptionId = value.Id;
                        value.PublicSettings_SettingsOptionId = this;
                    }
                    else
                    {
                        this._SettingsOptionId = default(int);
                    }
                    this.SendPropertyChanged("PublicSettingsOption_SettingsOptionId");
                }
            }
        }

        #region ICloneable Members

        /// <summary>
        /// There are no comments for Clone method in the schema.
        /// </summary>
        public virtual object Clone()
        {
            PublicSetting obj = new PublicSetting();
            obj.SettingsOptionId = SettingsOptionId;
            obj.Value = Value;
            obj.Id = Id;
            return obj;
        }

        #endregion
   
        /// <summary>
        /// There are no comments for PropertyChanging event in the schema.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// There are no comments for PropertyChanged event in the schema.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        /// <summary>
        /// There are no comments for SendPropertyChanged method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

    /// <summary>
    /// There are no comments for Model.PublicPreset in the schema.
    /// </summary>
    [Table(Name = @"public.presets")]
    public partial class PublicPreset : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable
    {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);
        #pragma warning disable 0649

        private int _Id;

        private string _Name;

        private string _Description;

        private string _Data;

        private bool? _Active = false;

        private string _Output;
        #pragma warning restore 0649

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnLoaded method in the schema.
        /// </summary>
        partial void OnLoaded();

        /// <summary>
        /// There are no comments for OnValidate method in the schema.
        /// </summary>
        partial void OnValidate(ChangeAction action);

        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();

        /// <summary>
        /// There are no comments for OnIdChanging method in the schema.
        /// </summary>
        partial void OnIdChanging(int value);

        /// <summary>
        /// There are no comments for OnIdChanged method in the schema.
        /// </summary>
        partial void OnIdChanged();

        /// <summary>
        /// There are no comments for OnNameChanging method in the schema.
        /// </summary>
        partial void OnNameChanging(string value);

        /// <summary>
        /// There are no comments for OnNameChanged method in the schema.
        /// </summary>
        partial void OnNameChanged();

        /// <summary>
        /// There are no comments for OnDescriptionChanging method in the schema.
        /// </summary>
        partial void OnDescriptionChanging(string value);

        /// <summary>
        /// There are no comments for OnDescriptionChanged method in the schema.
        /// </summary>
        partial void OnDescriptionChanged();

        /// <summary>
        /// There are no comments for OnDataChanging method in the schema.
        /// </summary>
        partial void OnDataChanging(string value);

        /// <summary>
        /// There are no comments for OnDataChanged method in the schema.
        /// </summary>
        partial void OnDataChanged();

        /// <summary>
        /// There are no comments for OnActiveChanging method in the schema.
        /// </summary>
        partial void OnActiveChanging(bool? value);

        /// <summary>
        /// There are no comments for OnActiveChanged method in the schema.
        /// </summary>
        partial void OnActiveChanged();

        /// <summary>
        /// There are no comments for OnOutputChanging method in the schema.
        /// </summary>
        partial void OnOutputChanging(string value);

        /// <summary>
        /// There are no comments for OnOutputChanged method in the schema.
        /// </summary>
        partial void OnOutputChanged();
        #endregion

        /// <summary>
        /// There are no comments for PublicPreset constructor in the schema.
        /// </summary>
        public PublicPreset()
        {
            OnCreated();
        }

    
        /// <summary>
        /// There are no comments for Id in the schema.
        /// </summary>
        [Column(Name = @"id", Storage = "_Id", AutoSync = AutoSync.OnInsert, CanBeNull = false, DbType = "SERIAL NOT NULL", IsDbGenerated = true, IsPrimaryKey = true)]
        public int Id
        {
            get
            {
                return this._Id;
            }
            set
            {
                if (this._Id != value)
                {
                    this.OnIdChanging(value);
                    this.SendPropertyChanging("Id");
                    this._Id = value;
                    this.SendPropertyChanged("Id");
                    this.OnIdChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Name in the schema.
        /// </summary>
        [Column(Name = @"""name""", Storage = "_Name", DbType = "VARCHAR(128)", UpdateCheck = UpdateCheck.Never)]
        public string Name
        {
            get
            {
                return this._Name;
            }
            set
            {
                if (this._Name != value)
                {
                    this.OnNameChanging(value);
                    this.SendPropertyChanging("Name");
                    this._Name = value;
                    this.SendPropertyChanged("Name");
                    this.OnNameChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Description in the schema.
        /// </summary>
        [Column(Name = @"description", Storage = "_Description", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Description
        {
            get
            {
                return this._Description;
            }
            set
            {
                if (this._Description != value)
                {
                    this.OnDescriptionChanging(value);
                    this.SendPropertyChanging("Description");
                    this._Description = value;
                    this.SendPropertyChanged("Description");
                    this.OnDescriptionChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Data in the schema.
        /// </summary>
        [Column(Name = @"""data""", Storage = "_Data", DbType = "VARCHAR", UpdateCheck = UpdateCheck.Never)]
        public string Data
        {
            get
            {
                return this._Data;
            }
            set
            {
                if (this._Data != value)
                {
                    this.OnDataChanging(value);
                    this.SendPropertyChanging("Data");
                    this._Data = value;
                    this.SendPropertyChanged("Data");
                    this.OnDataChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Active in the schema.
        /// </summary>
        [Column(Name = @"active", Storage = "_Active", DbType = "BOOL", UpdateCheck = UpdateCheck.Never)]
        public bool? Active
        {
            get
            {
                return this._Active;
            }
            set
            {
                if (this._Active != value)
                {
                    this.OnActiveChanging(value);
                    this.SendPropertyChanging("Active");
                    this._Active = value;
                    this.SendPropertyChanged("Active");
                    this.OnActiveChanged();
                }
            }
        }

    
        /// <summary>
        /// There are no comments for Output in the schema.
        /// </summary>
        [Column(Name = @"""output""", Storage = "_Output", DbType = "VARCHAR(128)", UpdateCheck = UpdateCheck.Never)]
        public string Output
        {
            get
            {
                return this._Output;
            }
            set
            {
                if (this._Output != value)
                {
                    this.OnOutputChanging(value);
                    this.SendPropertyChanging("Output");
                    this._Output = value;
                    this.SendPropertyChanged("Output");
                    this.OnOutputChanged();
                }
            }
        }

        #region ICloneable Members

        /// <summary>
        /// There are no comments for Clone method in the schema.
        /// </summary>
        public virtual object Clone()
        {
            PublicPreset obj = new PublicPreset();
            obj.Id = Id;
            obj.Name = Name;
            obj.Description = Description;
            obj.Data = Data;
            obj.Active = Active;
            obj.Output = Output;
            return obj;
        }

        #endregion
   
        /// <summary>
        /// There are no comments for PropertyChanging event in the schema.
        /// </summary>
        public event PropertyChangingEventHandler PropertyChanging;

        /// <summary>
        /// There are no comments for PropertyChanged event in the schema.
        /// </summary>
        public event PropertyChangedEventHandler PropertyChanged;

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        /// <summary>
        /// There are no comments for SendPropertyChanging method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        /// <summary>
        /// There are no comments for SendPropertyChanged method in the schema.
        /// </summary>
        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
