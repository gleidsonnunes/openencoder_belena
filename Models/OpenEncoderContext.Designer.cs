//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 06/05/2022 06:28:20
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.CodeDom.Compiler;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;
using Microsoft.EntityFrameworkCore.Infrastructure;

namespace openencoder
{

    /// <summary>
    /// There are no comments for OpenEncoderModel class in the schema.
    /// </summary>
    [GeneratedCode("Devart Entity Developer", "")]
    public partial class OpenEncoderModel : DbContext
    {

        /// <summary>
        /// There are no comments for OpenEncoderModel constructor in the schema.
        /// </summary>
        public OpenEncoderModel() :
            base()
        {
            OnCreated();
        }


        /// <summary>
        /// There are no comments for OnConfiguring(DbContextOptionsBuilder optionsBuilder) method in the schema.
        /// </summary>
        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UsePostgreSql(GetConnectionString("DbContextSettings:ConnectionString"));
                optionsBuilder.UseLazyLoadingProxies();
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        /// <summary>
        /// There are no comments for GetConnectionString method in the schema.
        /// </summary>
        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: true, reloadOnChange: false);
            configurationBuilder.AddEnvironmentVariables();
            var configuration = configurationBuilder.Build();
            return configuration.GetConnectionString(connectionStringName);
        }

        /// <summary>
        /// Allows you to customize the configuration of model.
        /// </summary>
        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        /// <summary>
        /// There are no comments for presets property in the schema.
        /// </summary>
        public virtual DbSet<presets> presets
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for users property in the schema.
        /// </summary>
        public virtual DbSet<users> users
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for jobs property in the schema.
        /// </summary>
        public virtual DbSet<jobs> jobs
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for encode property in the schema.
        /// </summary>
        public virtual DbSet<encode> encode
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for queue_jobs property in the schema.
        /// </summary>
        public virtual DbSet<queue_jobs> queue_jobs
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for settings_option property in the schema.
        /// </summary>
        public virtual DbSet<settings_option> settings_option
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for settings property in the schema.
        /// </summary>
        public virtual DbSet<settings> settings
        {
            get;
            set;
        }

        /// <summary>
        /// There are no comments for OnModelCreating in the schema.
        /// </summary>
        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration<presets>(new presetsConfiguration());
            modelBuilder.ApplyConfiguration<users>(new usersConfiguration());
            modelBuilder.ApplyConfiguration<jobs>(new jobsConfiguration());
            modelBuilder.ApplyConfiguration<encode>(new encodeConfiguration());
            modelBuilder.ApplyConfiguration<queue_jobs>(new queue_jobsConfiguration());
            modelBuilder.ApplyConfiguration<settings_option>(new settings_optionConfiguration());
            modelBuilder.ApplyConfiguration<settings>(new settingsConfiguration());
            CustomizeMapping(ref modelBuilder);
        }


        /// <summary>
        /// There are no comments for CustomizeMapping in the schema.
        /// </summary>
        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        /// <summary>
        /// There are no comments for HasChanges property in the schema.
        /// </summary>
        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }


        /// <summary>
        /// There are no comments for OnCreated method in the schema.
        /// </summary>
        partial void OnCreated();
    }
}

namespace openencoder
{
    /// <summary>
    /// There are no comments for openencoder.presets in the schema.
    /// </summary>
    [GeneratedCode("Devart Entity Developer", "")]
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class presets : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _id;

        private string _name;

        private string _description;

        private string _data;

        private bool? _active;

        private string _output;

        /// <summary>
        /// There are no comments for presets constructor in the schema.
        /// </summary>
        public presets()
        {
            this._active = false;
            OnCreated();
        }

        /// <summary>
        /// There are no comments for presets constructor in the schema.
        /// </summary>
        public presets(int id) : this()        {
            this.id = id;
        }

        /// <summary>
        /// There are no comments for id in the schema.
        /// </summary>
        [DataMember]
        public virtual int id
        {
            get
            {
                return this._id;
            }
            private set
            {
                if (this._id != value)
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging("id");
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for name in the schema.
        /// </summary>
        [DataMember]
        public virtual string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if (this._name != value)
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging("name");
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for description in the schema.
        /// </summary>
        [DataMember]
        public virtual string description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (this._description != value)
                {
                    this.OndescriptionChanging(value);
                    this.SendPropertyChanging("description");
                    this._description = value;
                    this.SendPropertyChanged("description");
                    this.OndescriptionChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for data in the schema.
        /// </summary>
        [DataMember]
        public virtual string data
        {
            get
            {
                return this._data;
            }
            set
            {
                if (this._data != value)
                {
                    this.OndataChanging(value);
                    this.SendPropertyChanging("data");
                    this._data = value;
                    this.SendPropertyChanged("data");
                    this.OndataChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for active in the schema.
        /// </summary>
        [DataMember]
        public virtual bool? active
        {
            get
            {
                return this._active;
            }
            set
            {
                if (this._active != value)
                {
                    this.OnactiveChanging(value);
                    this.SendPropertyChanging("active");
                    this._active = value;
                    this.SendPropertyChanged("active");
                    this.OnactiveChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for output in the schema.
        /// </summary>
        [DataMember]
        public virtual string output
        {
            get
            {
                return this._output;
            }
            set
            {
                if (this._output != value)
                {
                    this.OnoutputChanging(value);
                    this.SendPropertyChanging("output");
                    this._output = value;
                    this.SendPropertyChanged("output");
                    this.OnoutputChanged();
                }
            }
        }

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          presets toCompare = obj as presets;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.id, toCompare.id))
            return false;

          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + id.GetHashCode();
          return hashCode;
        }
        /// <summary>
        /// There are no comments for OnidChanging in the schema.
        /// </summary>
        partial void OnidChanging(int value);

        /// <summary>
        /// There are no comments for OnidChanged in the schema.
        /// </summary>
        partial void OnidChanged();
        /// <summary>
        /// There are no comments for OnnameChanging in the schema.
        /// </summary>
        partial void OnnameChanging(string value);

        /// <summary>
        /// There are no comments for OnnameChanged in the schema.
        /// </summary>
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for OndescriptionChanging in the schema.
        /// </summary>
        partial void OndescriptionChanging(string value);

        /// <summary>
        /// There are no comments for OndescriptionChanged in the schema.
        /// </summary>
        partial void OndescriptionChanged();
        /// <summary>
        /// There are no comments for OndataChanging in the schema.
        /// </summary>
        partial void OndataChanging(string value);

        /// <summary>
        /// There are no comments for OndataChanged in the schema.
        /// </summary>
        partial void OndataChanged();
        /// <summary>
        /// There are no comments for OnactiveChanging in the schema.
        /// </summary>
        partial void OnactiveChanging(bool? value);

        /// <summary>
        /// There are no comments for OnactiveChanged in the schema.
        /// </summary>
        partial void OnactiveChanged();
        /// <summary>
        /// There are no comments for OnoutputChanging in the schema.
        /// </summary>
        partial void OnoutputChanging(string value);

        /// <summary>
        /// There are no comments for OnoutputChanged in the schema.
        /// </summary>
        partial void OnoutputChanged();

        #endregion

        #region ICloneable Members

        public virtual object Clone()
        {
            presets obj = new presets();
            obj.id = id;
            obj.name = name;
            obj.description = description;
            obj.data = data;
            obj.active = active;
            obj.output = output;
            return obj;
        }

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    /// <summary>
    /// There are no comments for openencoder.users in the schema.
    /// </summary>
    [GeneratedCode("Devart Entity Developer", "")]
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class users : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private string _username;

        private int _id;

        private string _password;

        private string _role;

        private bool? _force_password_reset;

        private bool? _active;

        /// <summary>
        /// There are no comments for users constructor in the schema.
        /// </summary>
        public users()
        {
            this._force_password_reset = false;
            this._active = true;
            OnCreated();
        }

        /// <summary>
        /// There are no comments for users constructor in the schema.
        /// </summary>
        public users(int id) : this()        {
            this.id = id;
        }

        /// <summary>
        /// There are no comments for username in the schema.
        /// </summary>
        [DataMember]
        public virtual string username
        {
            get
            {
                return this._username;
            }
            set
            {
                if (this._username != value)
                {
                    this.OnusernameChanging(value);
                    this.SendPropertyChanging("username");
                    this._username = value;
                    this.SendPropertyChanged("username");
                    this.OnusernameChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for id in the schema.
        /// </summary>
        [DataMember]
        public virtual int id
        {
            get
            {
                return this._id;
            }
            private set
            {
                if (this._id != value)
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging("id");
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for password in the schema.
        /// </summary>
        [DataMember]
        public virtual string password
        {
            get
            {
                return this._password;
            }
            set
            {
                if (this._password != value)
                {
                    this.OnpasswordChanging(value);
                    this.SendPropertyChanging("password");
                    this._password = value;
                    this.SendPropertyChanged("password");
                    this.OnpasswordChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for role in the schema.
        /// </summary>
        [DataMember]
        public virtual string role
        {
            get
            {
                return this._role;
            }
            set
            {
                if (this._role != value)
                {
                    this.OnroleChanging(value);
                    this.SendPropertyChanging("role");
                    this._role = value;
                    this.SendPropertyChanged("role");
                    this.OnroleChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for force_password_reset in the schema.
        /// </summary>
        [DataMember]
        public virtual bool? force_password_reset
        {
            get
            {
                return this._force_password_reset;
            }
            set
            {
                if (this._force_password_reset != value)
                {
                    this.Onforce_password_resetChanging(value);
                    this.SendPropertyChanging("force_password_reset");
                    this._force_password_reset = value;
                    this.SendPropertyChanged("force_password_reset");
                    this.Onforce_password_resetChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for active in the schema.
        /// </summary>
        [DataMember]
        public virtual bool? active
        {
            get
            {
                return this._active;
            }
            set
            {
                if (this._active != value)
                {
                    this.OnactiveChanging(value);
                    this.SendPropertyChanging("active");
                    this._active = value;
                    this.SendPropertyChanged("active");
                    this.OnactiveChanged();
                }
            }
        }

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          users toCompare = obj as users;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.username, toCompare.username))
            return false;

          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + username.GetHashCode();
          return hashCode;
        }
        /// <summary>
        /// There are no comments for OnusernameChanging in the schema.
        /// </summary>
        partial void OnusernameChanging(string value);

        /// <summary>
        /// There are no comments for OnusernameChanged in the schema.
        /// </summary>
        partial void OnusernameChanged();
        /// <summary>
        /// There are no comments for OnidChanging in the schema.
        /// </summary>
        partial void OnidChanging(int value);

        /// <summary>
        /// There are no comments for OnidChanged in the schema.
        /// </summary>
        partial void OnidChanged();
        /// <summary>
        /// There are no comments for OnpasswordChanging in the schema.
        /// </summary>
        partial void OnpasswordChanging(string value);

        /// <summary>
        /// There are no comments for OnpasswordChanged in the schema.
        /// </summary>
        partial void OnpasswordChanged();
        /// <summary>
        /// There are no comments for OnroleChanging in the schema.
        /// </summary>
        partial void OnroleChanging(string value);

        /// <summary>
        /// There are no comments for OnroleChanged in the schema.
        /// </summary>
        partial void OnroleChanged();
        /// <summary>
        /// There are no comments for Onforce_password_resetChanging in the schema.
        /// </summary>
        partial void Onforce_password_resetChanging(bool? value);

        /// <summary>
        /// There are no comments for Onforce_password_resetChanged in the schema.
        /// </summary>
        partial void Onforce_password_resetChanged();
        /// <summary>
        /// There are no comments for OnactiveChanging in the schema.
        /// </summary>
        partial void OnactiveChanging(bool? value);

        /// <summary>
        /// There are no comments for OnactiveChanged in the schema.
        /// </summary>
        partial void OnactiveChanged();

        #endregion

        #region ICloneable Members

        public virtual object Clone()
        {
            users obj = new users();
            obj.username = username;
            obj.id = id;
            obj.password = password;
            obj.role = role;
            obj.force_password_reset = force_password_reset;
            obj.active = active;
            return obj;
        }

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    /// <summary>
    /// There are no comments for openencoder.jobs in the schema.
    /// </summary>
    [GeneratedCode("Devart Entity Developer", "")]
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class jobs : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private Guid _guid;

        private int _id;

        private string _preset;

        private DateTime? _created_date;

        private string _status;

        private string _source;

        private string _destination;

        private encode _encode;

        private queue_jobs _queue_jobs;

        /// <summary>
        /// There are no comments for jobs constructor in the schema.
        /// </summary>
        public jobs()
        {
            OnCreated();
        }

        /// <summary>
        /// There are no comments for jobs constructor in the schema.
        /// </summary>
        public jobs(int id, DateTime? created_date) : this()        {
            this.id = id;
            this.created_date = created_date;
        }

        /// <summary>
        /// There are no comments for guid in the schema.
        /// </summary>
        [DataMember]
        public virtual Guid guid
        {
            get
            {
                return this._guid;
            }
            set
            {
                if (this._guid != value)
                {
                    this.OnguidChanging(value);
                    this.SendPropertyChanging("guid");
                    this._guid = value;
                    this.SendPropertyChanged("guid");
                    this.OnguidChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for id in the schema.
        /// </summary>
        [DataMember]
        public virtual int id
        {
            get
            {
                return this._id;
            }
            private set
            {
                if (this._id != value)
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging("id");
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for preset in the schema.
        /// </summary>
        [DataMember]
        public virtual string preset
        {
            get
            {
                return this._preset;
            }
            set
            {
                if (this._preset != value)
                {
                    this.OnpresetChanging(value);
                    this.SendPropertyChanging("preset");
                    this._preset = value;
                    this.SendPropertyChanged("preset");
                    this.OnpresetChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for created_date in the schema.
        /// </summary>
        [DataMember]
        public virtual DateTime? created_date
        {
            get
            {
                return this._created_date;
            }
            private set
            {
                if (this._created_date != value)
                {
                    this.Oncreated_dateChanging(value);
                    this.SendPropertyChanging("created_date");
                    this._created_date = value;
                    this.SendPropertyChanged("created_date");
                    this.Oncreated_dateChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for status in the schema.
        /// </summary>
        [DataMember]
        public virtual string status
        {
            get
            {
                return this._status;
            }
            set
            {
                if (this._status != value)
                {
                    this.OnstatusChanging(value);
                    this.SendPropertyChanging("status");
                    this._status = value;
                    this.SendPropertyChanged("status");
                    this.OnstatusChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for source in the schema.
        /// </summary>
        [DataMember]
        public virtual string source
        {
            get
            {
                return this._source;
            }
            set
            {
                if (this._source != value)
                {
                    this.OnsourceChanging(value);
                    this.SendPropertyChanging("source");
                    this._source = value;
                    this.SendPropertyChanged("source");
                    this.OnsourceChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for destination in the schema.
        /// </summary>
        [DataMember]
        public virtual string destination
        {
            get
            {
                return this._destination;
            }
            set
            {
                if (this._destination != value)
                {
                    this.OndestinationChanging(value);
                    this.SendPropertyChanging("destination");
                    this._destination = value;
                    this.SendPropertyChanged("destination");
                    this.OndestinationChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for encode in the schema.
        /// </summary>
        [DataMember]
        public virtual encode encode
        {
            get
            {
                return this._encode;
            }
            set
            {
                if (this._encode != value)
                {
                    this.OnencodeChanging(value);
                    this.SendPropertyChanging("encode");
                    this._encode = value;
                    this.SendPropertyChanged("encode");
                    this.OnencodeChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for queue_jobs in the schema.
        /// </summary>
        [DataMember]
        public virtual queue_jobs queue_jobs
        {
            get
            {
                return this._queue_jobs;
            }
            set
            {
                if (this._queue_jobs != value)
                {
                    this.Onqueue_jobsChanging(value);
                    this.SendPropertyChanging("queue_jobs");
                    this._queue_jobs = value;
                    this.SendPropertyChanged("queue_jobs");
                    this.Onqueue_jobsChanged();
                }
            }
        }

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          jobs toCompare = obj as jobs;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.guid, toCompare.guid))
            return false;

          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + guid.GetHashCode();
          return hashCode;
        }
        /// <summary>
        /// There are no comments for OnguidChanging in the schema.
        /// </summary>
        partial void OnguidChanging(Guid value);

        /// <summary>
        /// There are no comments for OnguidChanged in the schema.
        /// </summary>
        partial void OnguidChanged();
        /// <summary>
        /// There are no comments for OnidChanging in the schema.
        /// </summary>
        partial void OnidChanging(int value);

        /// <summary>
        /// There are no comments for OnidChanged in the schema.
        /// </summary>
        partial void OnidChanged();
        /// <summary>
        /// There are no comments for OnpresetChanging in the schema.
        /// </summary>
        partial void OnpresetChanging(string value);

        /// <summary>
        /// There are no comments for OnpresetChanged in the schema.
        /// </summary>
        partial void OnpresetChanged();
        /// <summary>
        /// There are no comments for Oncreated_dateChanging in the schema.
        /// </summary>
        partial void Oncreated_dateChanging(DateTime? value);

        /// <summary>
        /// There are no comments for Oncreated_dateChanged in the schema.
        /// </summary>
        partial void Oncreated_dateChanged();
        /// <summary>
        /// There are no comments for OnstatusChanging in the schema.
        /// </summary>
        partial void OnstatusChanging(string value);

        /// <summary>
        /// There are no comments for OnstatusChanged in the schema.
        /// </summary>
        partial void OnstatusChanged();
        /// <summary>
        /// There are no comments for OnsourceChanging in the schema.
        /// </summary>
        partial void OnsourceChanging(string value);

        /// <summary>
        /// There are no comments for OnsourceChanged in the schema.
        /// </summary>
        partial void OnsourceChanged();
        /// <summary>
        /// There are no comments for OndestinationChanging in the schema.
        /// </summary>
        partial void OndestinationChanging(string value);

        /// <summary>
        /// There are no comments for OndestinationChanged in the schema.
        /// </summary>
        partial void OndestinationChanged();
        /// <summary>
        /// There are no comments for OnencodeChanging in the schema.
        /// </summary>
        partial void OnencodeChanging(encode value);

        /// <summary>
        /// There are no comments for OnencodeChanged in the schema.
        /// </summary>
        partial void OnencodeChanged();
        /// <summary>
        /// There are no comments for Onqueue_jobsChanging in the schema.
        /// </summary>
        partial void Onqueue_jobsChanging(queue_jobs value);

        /// <summary>
        /// There are no comments for Onqueue_jobsChanged in the schema.
        /// </summary>
        partial void Onqueue_jobsChanged();

        #endregion

        #region ICloneable Members

        public virtual object Clone()
        {
            jobs obj = new jobs();
            obj.guid = guid;
            obj.id = id;
            obj.preset = preset;
            obj.created_date = created_date;
            obj.status = status;
            obj.source = source;
            obj.destination = destination;
            return obj;
        }

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    /// <summary>
    /// There are no comments for openencoder.encode in the schema.
    /// </summary>
    [GeneratedCode("Devart Entity Developer", "")]
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class encode : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _id;

        private string _probe;

        private double? _progress;

        private int? _job_id;

        private string _speed;

        private double? _fps;

        private string _options;

        private jobs _jobs;

        /// <summary>
        /// There are no comments for encode constructor in the schema.
        /// </summary>
        public encode()
        {
            this._progress = 0;
            this._fps = 0;
            OnCreated();
        }

        /// <summary>
        /// There are no comments for encode constructor in the schema.
        /// </summary>
        public encode(int id) : this()        {
            this.id = id;
        }

        /// <summary>
        /// There are no comments for id in the schema.
        /// </summary>
        [DataMember]
        public virtual int id
        {
            get
            {
                return this._id;
            }
            private set
            {
                if (this._id != value)
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging("id");
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for probe in the schema.
        /// </summary>
        [DataMember]
        public virtual string probe
        {
            get
            {
                return this._probe;
            }
            set
            {
                if (this._probe != value)
                {
                    this.OnprobeChanging(value);
                    this.SendPropertyChanging("probe");
                    this._probe = value;
                    this.SendPropertyChanged("probe");
                    this.OnprobeChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for progress in the schema.
        /// </summary>
        [DataMember]
        public virtual double? progress
        {
            get
            {
                return this._progress;
            }
            set
            {
                if (this._progress != value)
                {
                    this.OnprogressChanging(value);
                    this.SendPropertyChanging("progress");
                    this._progress = value;
                    this.SendPropertyChanged("progress");
                    this.OnprogressChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for job_id in the schema.
        /// </summary>
        [DataMember]
        public virtual int? job_id
        {
            get
            {
                return this._job_id;
            }
            set
            {
                if (this._job_id != value)
                {
                    this.Onjob_idChanging(value);
                    this.SendPropertyChanging("job_id");
                    this._job_id = value;
                    this.SendPropertyChanged("job_id");
                    this.Onjob_idChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for speed in the schema.
        /// </summary>
        [DataMember]
        public virtual string speed
        {
            get
            {
                return this._speed;
            }
            set
            {
                if (this._speed != value)
                {
                    this.OnspeedChanging(value);
                    this.SendPropertyChanging("speed");
                    this._speed = value;
                    this.SendPropertyChanged("speed");
                    this.OnspeedChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for fps in the schema.
        /// </summary>
        [DataMember]
        public virtual double? fps
        {
            get
            {
                return this._fps;
            }
            set
            {
                if (this._fps != value)
                {
                    this.OnfpsChanging(value);
                    this.SendPropertyChanging("fps");
                    this._fps = value;
                    this.SendPropertyChanged("fps");
                    this.OnfpsChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for options in the schema.
        /// </summary>
        [DataMember]
        public virtual string options
        {
            get
            {
                return this._options;
            }
            set
            {
                if (this._options != value)
                {
                    this.OnoptionsChanging(value);
                    this.SendPropertyChanging("options");
                    this._options = value;
                    this.SendPropertyChanged("options");
                    this.OnoptionsChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for jobs in the schema.
        /// </summary>
        [DataMember]
        public virtual jobs jobs
        {
            get
            {
                return this._jobs;
            }
            set
            {
                if (this._jobs != value)
                {
                    this.OnjobsChanging(value);
                    this.SendPropertyChanging("jobs");
                    this._jobs = value;
                    this.SendPropertyChanged("jobs");
                    this.OnjobsChanged();
                }
            }
        }

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          encode toCompare = obj as encode;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.id, toCompare.id))
            return false;

          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + id.GetHashCode();
          return hashCode;
        }
        /// <summary>
        /// There are no comments for OnidChanging in the schema.
        /// </summary>
        partial void OnidChanging(int value);

        /// <summary>
        /// There are no comments for OnidChanged in the schema.
        /// </summary>
        partial void OnidChanged();
        /// <summary>
        /// There are no comments for OnprobeChanging in the schema.
        /// </summary>
        partial void OnprobeChanging(string value);

        /// <summary>
        /// There are no comments for OnprobeChanged in the schema.
        /// </summary>
        partial void OnprobeChanged();
        /// <summary>
        /// There are no comments for OnprogressChanging in the schema.
        /// </summary>
        partial void OnprogressChanging(double? value);

        /// <summary>
        /// There are no comments for OnprogressChanged in the schema.
        /// </summary>
        partial void OnprogressChanged();
        /// <summary>
        /// There are no comments for Onjob_idChanging in the schema.
        /// </summary>
        partial void Onjob_idChanging(int? value);

        /// <summary>
        /// There are no comments for Onjob_idChanged in the schema.
        /// </summary>
        partial void Onjob_idChanged();
        /// <summary>
        /// There are no comments for OnspeedChanging in the schema.
        /// </summary>
        partial void OnspeedChanging(string value);

        /// <summary>
        /// There are no comments for OnspeedChanged in the schema.
        /// </summary>
        partial void OnspeedChanged();
        /// <summary>
        /// There are no comments for OnfpsChanging in the schema.
        /// </summary>
        partial void OnfpsChanging(double? value);

        /// <summary>
        /// There are no comments for OnfpsChanged in the schema.
        /// </summary>
        partial void OnfpsChanged();
        /// <summary>
        /// There are no comments for OnoptionsChanging in the schema.
        /// </summary>
        partial void OnoptionsChanging(string value);

        /// <summary>
        /// There are no comments for OnoptionsChanged in the schema.
        /// </summary>
        partial void OnoptionsChanged();
        /// <summary>
        /// There are no comments for OnjobsChanging in the schema.
        /// </summary>
        partial void OnjobsChanging(jobs value);

        /// <summary>
        /// There are no comments for OnjobsChanged in the schema.
        /// </summary>
        partial void OnjobsChanged();

        #endregion

        #region ICloneable Members

        public virtual object Clone()
        {
            encode obj = new encode();
            obj.id = id;
            obj.probe = probe;
            obj.progress = progress;
            obj.job_id = job_id;
            obj.speed = speed;
            obj.fps = fps;
            obj.options = options;
            return obj;
        }

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    /// <summary>
    /// There are no comments for openencoder.queue_jobs in the schema.
    /// </summary>
    [GeneratedCode("Devart Entity Developer", "")]
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class queue_jobs : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private Guid _guid;

        private string _preset;

        private string _source;

        private string _destiantion;

        private jobs _jobs;

        /// <summary>
        /// There are no comments for queue_jobs constructor in the schema.
        /// </summary>
        public queue_jobs()
        {
            OnCreated();
        }

        /// <summary>
        /// There are no comments for guid in the schema.
        /// </summary>
        [DataMember]
        public virtual Guid guid
        {
            get
            {
                return this._guid;
            }
            set
            {
                if (this._guid != value)
                {
                    this.OnguidChanging(value);
                    this.SendPropertyChanging("guid");
                    this._guid = value;
                    this.SendPropertyChanged("guid");
                    this.OnguidChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for preset in the schema.
        /// </summary>
        [DataMember]
        public virtual string preset
        {
            get
            {
                return this._preset;
            }
            set
            {
                if (this._preset != value)
                {
                    this.OnpresetChanging(value);
                    this.SendPropertyChanging("preset");
                    this._preset = value;
                    this.SendPropertyChanged("preset");
                    this.OnpresetChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for source in the schema.
        /// </summary>
        [DataMember]
        public virtual string source
        {
            get
            {
                return this._source;
            }
            set
            {
                if (this._source != value)
                {
                    this.OnsourceChanging(value);
                    this.SendPropertyChanging("source");
                    this._source = value;
                    this.SendPropertyChanged("source");
                    this.OnsourceChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for destiantion in the schema.
        /// </summary>
        [DataMember]
        public virtual string destiantion
        {
            get
            {
                return this._destiantion;
            }
            set
            {
                if (this._destiantion != value)
                {
                    this.OndestiantionChanging(value);
                    this.SendPropertyChanging("destiantion");
                    this._destiantion = value;
                    this.SendPropertyChanged("destiantion");
                    this.OndestiantionChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for jobs in the schema.
        /// </summary>
        [DataMember]
        public virtual jobs jobs
        {
            get
            {
                return this._jobs;
            }
            set
            {
                if (this._jobs != value)
                {
                    this.OnjobsChanging(value);
                    this.SendPropertyChanging("jobs");
                    this._jobs = value;
                    this.SendPropertyChanged("jobs");
                    this.OnjobsChanged();
                }
            }
        }

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          queue_jobs toCompare = obj as queue_jobs;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.guid, toCompare.guid))
            return false;

          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + guid.GetHashCode();
          return hashCode;
        }
        /// <summary>
        /// There are no comments for OnguidChanging in the schema.
        /// </summary>
        partial void OnguidChanging(Guid value);

        /// <summary>
        /// There are no comments for OnguidChanged in the schema.
        /// </summary>
        partial void OnguidChanged();
        /// <summary>
        /// There are no comments for OnpresetChanging in the schema.
        /// </summary>
        partial void OnpresetChanging(string value);

        /// <summary>
        /// There are no comments for OnpresetChanged in the schema.
        /// </summary>
        partial void OnpresetChanged();
        /// <summary>
        /// There are no comments for OnsourceChanging in the schema.
        /// </summary>
        partial void OnsourceChanging(string value);

        /// <summary>
        /// There are no comments for OnsourceChanged in the schema.
        /// </summary>
        partial void OnsourceChanged();
        /// <summary>
        /// There are no comments for OndestiantionChanging in the schema.
        /// </summary>
        partial void OndestiantionChanging(string value);

        /// <summary>
        /// There are no comments for OndestiantionChanged in the schema.
        /// </summary>
        partial void OndestiantionChanged();
        /// <summary>
        /// There are no comments for OnjobsChanging in the schema.
        /// </summary>
        partial void OnjobsChanging(jobs value);

        /// <summary>
        /// There are no comments for OnjobsChanged in the schema.
        /// </summary>
        partial void OnjobsChanged();

        #endregion

        #region ICloneable Members

        public virtual object Clone()
        {
            queue_jobs obj = new queue_jobs();
            obj.guid = guid;
            obj.preset = preset;
            obj.source = source;
            obj.destiantion = destiantion;
            return obj;
        }

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    /// <summary>
    /// There are no comments for openencoder.settings_option in the schema.
    /// </summary>
    [GeneratedCode("Devart Entity Developer", "")]
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class settings_option : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private int _id;

        private string _name;

        private string _description;

        private string _title;

        private IList<settings> _settings;

        /// <summary>
        /// There are no comments for settings_option constructor in the schema.
        /// </summary>
        public settings_option()
        {
            this._settings = new List<settings>();
            OnCreated();
        }

        /// <summary>
        /// There are no comments for settings_option constructor in the schema.
        /// </summary>
        public settings_option(int id) : this()        {
            this.id = id;
        }

        /// <summary>
        /// There are no comments for id in the schema.
        /// </summary>
        [DataMember]
        public virtual int id
        {
            get
            {
                return this._id;
            }
            private set
            {
                if (this._id != value)
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging("id");
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for name in the schema.
        /// </summary>
        [DataMember]
        public virtual string name
        {
            get
            {
                return this._name;
            }
            set
            {
                if (this._name != value)
                {
                    this.OnnameChanging(value);
                    this.SendPropertyChanging("name");
                    this._name = value;
                    this.SendPropertyChanged("name");
                    this.OnnameChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for description in the schema.
        /// </summary>
        [DataMember]
        public virtual string description
        {
            get
            {
                return this._description;
            }
            set
            {
                if (this._description != value)
                {
                    this.OndescriptionChanging(value);
                    this.SendPropertyChanging("description");
                    this._description = value;
                    this.SendPropertyChanged("description");
                    this.OndescriptionChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for title in the schema.
        /// </summary>
        [DataMember]
        public virtual string title
        {
            get
            {
                return this._title;
            }
            set
            {
                if (this._title != value)
                {
                    this.OntitleChanging(value);
                    this.SendPropertyChanging("title");
                    this._title = value;
                    this.SendPropertyChanged("title");
                    this.OntitleChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for settings in the schema.
        /// </summary>
        [DataMember]
        public virtual IList<settings> settings
        {
            get
            {
                return this._settings;
            }
            set
            {
                this._settings = value;
            }
        }

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          settings_option toCompare = obj as settings_option;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.id, toCompare.id))
            return false;

          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + id.GetHashCode();
          return hashCode;
        }
        /// <summary>
        /// There are no comments for OnidChanging in the schema.
        /// </summary>
        partial void OnidChanging(int value);

        /// <summary>
        /// There are no comments for OnidChanged in the schema.
        /// </summary>
        partial void OnidChanged();
        /// <summary>
        /// There are no comments for OnnameChanging in the schema.
        /// </summary>
        partial void OnnameChanging(string value);

        /// <summary>
        /// There are no comments for OnnameChanged in the schema.
        /// </summary>
        partial void OnnameChanged();
        /// <summary>
        /// There are no comments for OndescriptionChanging in the schema.
        /// </summary>
        partial void OndescriptionChanging(string value);

        /// <summary>
        /// There are no comments for OndescriptionChanged in the schema.
        /// </summary>
        partial void OndescriptionChanged();
        /// <summary>
        /// There are no comments for OntitleChanging in the schema.
        /// </summary>
        partial void OntitleChanging(string value);

        /// <summary>
        /// There are no comments for OntitleChanged in the schema.
        /// </summary>
        partial void OntitleChanged();

        #endregion

        #region ICloneable Members

        public virtual object Clone()
        {
            settings_option obj = new settings_option();
            obj.id = id;
            obj.name = name;
            obj.description = description;
            obj.title = title;
            return obj;
        }

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }
    /// <summary>
    /// There are no comments for openencoder.settings in the schema.
    /// </summary>
    [GeneratedCode("Devart Entity Developer", "")]
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class settings : INotifyPropertyChanging, INotifyPropertyChanged, ICloneable {

        private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(System.String.Empty);

        private string _value;

        private int _id;

        private settings_option _settings_option;

        /// <summary>
        /// There are no comments for settings constructor in the schema.
        /// </summary>
        public settings()
        {
            OnCreated();
        }

        /// <summary>
        /// There are no comments for settings constructor in the schema.
        /// </summary>
        public settings(int id) : this()        {
            this.id = id;
        }

        /// <summary>
        /// There are no comments for value in the schema.
        /// </summary>
        [DataMember]
        public virtual string value
        {
            get
            {
                return this._value;
            }
            set
            {
                if (this._value != value)
                {
                    this.OnvalueChanging(value);
                    this.SendPropertyChanging("value");
                    this._value = value;
                    this.SendPropertyChanged("value");
                    this.OnvalueChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for id in the schema.
        /// </summary>
        [DataMember]
        public virtual int id
        {
            get
            {
                return this._id;
            }
            private set
            {
                if (this._id != value)
                {
                    this.OnidChanging(value);
                    this.SendPropertyChanging("id");
                    this._id = value;
                    this.SendPropertyChanged("id");
                    this.OnidChanged();
                }
            }
        }

        /// <summary>
        /// There are no comments for settings_option in the schema.
        /// </summary>
        [DataMember]
        public virtual settings_option settings_option
        {
            get
            {
                return this._settings_option;
            }
            set
            {
                if (this._settings_option != value)
                {
                    this.Onsettings_optionChanging(value);
                    this.SendPropertyChanging("settings_option");
                    this._settings_option = value;
                    this.SendPropertyChanged("settings_option");
                    this.Onsettings_optionChanged();
                }
            }
        }

        #region Extensibility Method Definitions

        /// <summary>
        /// There are no comments for OnCreated in the schema.
        /// </summary>
        partial void OnCreated();

        public override bool Equals(object obj)
        {
          settings toCompare = obj as settings;
          if (toCompare == null)
          {
            return false;
          }

          if (!Object.Equals(this.id, toCompare.id))
            return false;

          return true;
        }

        public override int GetHashCode()
        {
          int hashCode = 13;
          hashCode = (hashCode * 7) + id.GetHashCode();
          return hashCode;
        }
        /// <summary>
        /// There are no comments for OnvalueChanging in the schema.
        /// </summary>
        partial void OnvalueChanging(string value);

        /// <summary>
        /// There are no comments for OnvalueChanged in the schema.
        /// </summary>
        partial void OnvalueChanged();
        /// <summary>
        /// There are no comments for OnidChanging in the schema.
        /// </summary>
        partial void OnidChanging(int value);

        /// <summary>
        /// There are no comments for OnidChanged in the schema.
        /// </summary>
        partial void OnidChanged();
        /// <summary>
        /// There are no comments for Onsettings_optionChanging in the schema.
        /// </summary>
        partial void Onsettings_optionChanging(settings_option value);

        /// <summary>
        /// There are no comments for Onsettings_optionChanged in the schema.
        /// </summary>
        partial void Onsettings_optionChanged();

        #endregion

        #region ICloneable Members

        public virtual object Clone()
        {
            settings obj = new settings();
            obj.value = value;
            obj.id = id;
            return obj;
        }

        #endregion

        public virtual event PropertyChangingEventHandler PropertyChanging;

        public virtual event PropertyChangedEventHandler PropertyChanged;

        protected virtual void SendPropertyChanging()
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, emptyChangingEventArgs);
        }

        protected virtual void SendPropertyChanging(System.String propertyName) 
        {
            var handler = this.PropertyChanging;
            if (handler != null)
                handler(this, new PropertyChangingEventArgs(propertyName));
        }

        protected virtual void SendPropertyChanged(System.String propertyName)
        {
            var handler = this.PropertyChanged;
            if (handler != null)
                handler(this, new PropertyChangedEventArgs(propertyName));
        }
    }

}
