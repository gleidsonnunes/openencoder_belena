//------------------------------------------------------------------------------
// This is auto-generated code.
//------------------------------------------------------------------------------
// This code was generated by Entity Developer tool using EF Core template.
// Code is generated on: 12/03/2022 05:16:43
//
// Changes to this file may cause incorrect behavior and will be lost if
// the code is regenerated.
//------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Linq.Expressions;
using System.Reflection;
using System.Runtime.Serialization;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Internal;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.Extensions.Configuration;

namespace openencoder
{

    public partial class OpenEncoderModel : DbContext
    {

        public OpenEncoderModel() :
            base()
        {
            OnCreated();
        }

        public OpenEncoderModel(DbContextOptions<OpenEncoderModel> options) :
            base(options)
        {
            OnCreated();
        }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured ||
                (!optionsBuilder.Options.Extensions.OfType<RelationalOptionsExtension>().Any(ext => !string.IsNullOrEmpty(ext.ConnectionString) || ext.Connection != null) &&
                 !optionsBuilder.Options.Extensions.Any(ext => !(ext is RelationalOptionsExtension) && !(ext is CoreOptionsExtension))))
            {
                optionsBuilder.UseNpgsql(GetConnectionString("DbContextSettings:ConnectionString"));
            }
            CustomizeConfiguration(ref optionsBuilder);
            base.OnConfiguring(optionsBuilder);
        }

        private static string GetConnectionString(string connectionStringName)
        {
            var configurationBuilder = new ConfigurationBuilder().AddJsonFile("appsettings.json", optional: false, reloadOnChange: true);
            var configuration = configurationBuilder.Build();
            return configuration.GetValue<string>(connectionStringName);
        }

        partial void CustomizeConfiguration(ref DbContextOptionsBuilder optionsBuilder);

        public virtual DbSet<presets> presets
        {
            get;
            set;
        }

        public virtual DbSet<users> users
        {
            get;
            set;
        }

        public virtual DbSet<settings_option> settings_option
        {
            get;
            set;
        }

        public virtual DbSet<settings> settings
        {
            get;
            set;
        }

        public virtual DbSet<jobs> jobs
        {
            get;
            set;
        }

        public virtual DbSet<encode> encode
        {
            get;
            set;
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);

            modelBuilder.ApplyConfiguration<presets>(new presetsConfiguration());
            modelBuilder.ApplyConfiguration<users>(new usersConfiguration());
            modelBuilder.ApplyConfiguration<settings_option>(new settings_optionConfiguration());
            modelBuilder.ApplyConfiguration<settings>(new settingsConfiguration());
            modelBuilder.ApplyConfiguration<jobs>(new jobsConfiguration());
            modelBuilder.ApplyConfiguration<encode>(new encodeConfiguration());
            CustomizeMapping(ref modelBuilder);
        }

        partial void CustomizeMapping(ref ModelBuilder modelBuilder);

        public bool HasChanges()
        {
            return ChangeTracker.Entries().Any(e => e.State == Microsoft.EntityFrameworkCore.EntityState.Added || e.State == Microsoft.EntityFrameworkCore.EntityState.Modified || e.State == Microsoft.EntityFrameworkCore.EntityState.Deleted);
        }

        partial void OnCreated();
    }
}

namespace openencoder
{
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class presets {

        public presets()
        {
            this.active = false;
            OnCreated();
        }

        public presets(int id) : this()        {
            this.id = id;
        }

        [DataMember]
        public virtual int id { get; private set; }

        [DataMember]
        public virtual string name { get; set; }

        [DataMember]
        public virtual string description { get; set; }

        [DataMember]
        public virtual string data { get; set; }

        [DataMember]
        public virtual bool? active { get; set; }

        [DataMember]
        public virtual string output { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class users {

        public users()
        {
            this.force_password_reset = false;
            this.active = true;
            OnCreated();
        }

        public users(int id) : this()        {
            this.id = id;
        }

        [DataMember]
        public virtual int id { get; private set; }

        [DataMember]
        public virtual string username { get; set; }

        [DataMember]
        public virtual string password { get; set; }

        [DataMember]
        public virtual string role { get; set; }

        [DataMember]
        public virtual bool? force_password_reset { get; set; }

        [DataMember]
        public virtual bool? active { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class settings_option {

        public settings_option()
        {
            this.secure = false;
            OnCreated();
        }

        public settings_option(int id) : this()        {
            this.id = id;
        }

        [DataMember]
        public virtual int id { get; private set; }

        [DataMember]
        public virtual string name { get; set; }

        [DataMember]
        public virtual string description { get; set; }

        [DataMember]
        public virtual string title { get; set; }

        [DataMember]
        public virtual bool? secure { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class settings {

        public settings()
        {
            this.encrypted = false;
            OnCreated();
        }

        public settings(int id) : this()        {
            this.id = id;
        }

        [DataMember]
        public virtual int settings_option_id { get; set; }

        [DataMember]
        public virtual string value { get; set; }

        [DataMember]
        public virtual int id { get; private set; }

        [DataMember]
        public virtual bool? encrypted { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class jobs {

        public jobs()
        {
            OnCreated();
        }

        public jobs(int id, DateTime? created_date) : this()        {
            this.id = id;
            this.created_date = created_date;
        }

        [DataMember]
        public virtual int id { get; private set; }

        [DataMember]
        public virtual string guid { get; set; }

        [DataMember]
        public virtual string preset { get; set; }

        [DataMember]
        public virtual DateTime? created_date { get; private set; }

        [DataMember]
        public virtual string status { get; set; }

        [DataMember]
        public virtual string source { get; set; }

        [DataMember]
        public virtual string destination { get; set; }

        [DataMember]
        public virtual encode encode { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }
    [DataContract(IsReference=true)]
    [Serializable()]
    public partial class encode {

        public encode()
        {
            this.progress = 0;
            this.fps = 0;
            OnCreated();
        }

        public encode(int id) : this()        {
            this.id = id;
        }

        [DataMember]
        public virtual int id { get; private set; }

        [DataMember]
        public virtual string probe { get; set; }

        [DataMember]
        public virtual double? progress { get; set; }

        [DataMember]
        public virtual int? job_id { get; set; }

        [DataMember]
        public virtual string speed { get; set; }

        [DataMember]
        public virtual double? fps { get; set; }

        [DataMember]
        public virtual string options { get; set; }

        [DataMember]
        public virtual jobs jobs { get; set; }

        #region Extensibility Method Definitions

        partial void OnCreated();

        #endregion
    }

}
